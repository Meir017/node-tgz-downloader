#!/usr/bin/env node

require('colors');

const program = require('commander');
const packageJson = require('../package.json');

const start = Date.now();
process.on('unhandledRejection', error => {
    console.log(`[${'unhandledRejection'.red}]: ${error.message}`, error);
})
process.on('beforeExit', () => {
    console.log(`completed in ${Date.now() - start}ms`.green);
});

const commands = require('../lib/commands');

program.version(packageJson.version);

program
    .command('package-lock <uri>')
    .description('download tarballs based on a package-lock.json')
    .option('--directory [directory]')
    .action((uri, command) => commands.packageLockCommand(uri, command));

program
    .command('package <name> [version]')
    .description('download tarballs based on a package and a version')
    .option('--directory [directory]')
    .option('--devDependencies')
    .option('--peerDependencies')
    .action((name, version, command) => commands.packageCommand(name, version, command));

program
    .command('package-json <uri>')
    .description('download tarballs based on a package.json')
    .option('--directory [directory]')
    .option('--devDependencies')
    .option('--peerDependencies')
    .action((uri, command) => commands.packageJsonCommand(uri, command));

program
    .command('search <keyword>')
    .description('download tarballs based on a npm registry search results')
    .option('--directory [directory]')
    .option('--devDependencies')
    .option('--peerDependencies')
    .action((keyword, command) => commands.searchCommand(keyword, command));

program
    .command('generate <name> [version]')
    .description('generates the download links for a giving package and a version')
    .option('--outputFile [outputFile]')
    .option('--devDependencies')
    .option('--peerDependencies')
    .action((name, version, command) => commands.generateCommand(name, version, command));

program
    .command('from-generated <uri>')
    .description('download tarballs using a generated file created by the generate command')
    .option('--directory [directory]')
    .action((uri, command) => commands.fromGeneratedCommand(uri, command));

program.parse(process.argv);